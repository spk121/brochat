#!/usr/bin/env php
<?php

// Script version and metadata
const VERSION = '0.1';
const PROGRAM_NAME = 'configure';

// Verbosity levels
const VERBOSITY_QUIET = 0;
const VERBOSITY_NORMAL = 1;
const VERBOSITY_VERBOSE = 2;

$defaults = ['verbosity' => VERBOSITY_NORMAL];

// Default configuration values
$config = [
    'prefix' => '/usr/local',
    'datarootdir' => '@prefix@/share',
    'datadir' => '@datarootdir@',
    'localstatedir' => '@prefix@/var',
    'sysconfdir' => '@prefix@/etc',
    'pkgdatadir' => '@datadir@/brochat',
    'pkglocalstatedir' => '@localstatedir@/brochat',
    'pkgsysconfdir' => '@sysconfdir@/brochat',
    'php_fpm' => 'php-fpm',
    'php_fpm_sock' => '/run/php/php-fpm.sock',
    'php_fpm_version' => '',
    'nginx_version' => '',
    'sqlite_version' => '',
    'init_sql' => 'private/init.sql',
    'srcdir' => '.',
    'builddir' => 'build',
    'mode' => 'DEVELOPMENT',
    'domain' => 'yourdomain.com',
    'public_dir' => '@pkgdatadir@/public',
    'private_dir' => '@pkgdatadir@/private',
    'db_dir' => '@pkglocalstatedir@/db',
    'log_dir' => '@pkglocalstatedir@/logs',
    'notes_dir' => '@pkglocalstatedir@/notes',
    'snaps_dir' => '@pkglocalstatedir@/snaps',
    'snaps_previews_dir' => '@snaps_dir@/previews',
    'config_dir' => '@pkgsysconfdir@',
];

function log_to_file($message) {
    file_put_contents('config.log', date('Y-m-d H:i:s') . ": $message\n", FILE_APPEND);
}

function log_message($message, $level = VERBOSITY_NORMAL, $to_stderr = false) {
    global $defaults;
    if ($defaults['verbosity'] >= $level) {
        $output = $to_stderr ? STDERR : STDOUT;
        fwrite($output, $message . "\n");
    }
    // Always write the verbose message to the log file.
    log_to_file($message);
}

function parse_arguments() {
    global $config, $argv, $defaults;

    // Parse GNU-standard long options
    $short_opts = '';
    $long_opts = [
        'prefix:', 'exec-prefix:', 'bindir:', 'libdir:', 'includedir:',
        'datarootdir:', 'datadir:', 'localstatedir:', 'sysconfdir:',
        'srcdir:', 'builddir:', 'mode:',
        'version', 'help', 'wtf', 'fml',
        'verbose', 'quiet'
    ];
    $options = getopt($short_opts, $long_opts);

    // Extract all long options from $argv
    $provided_long_opts = [];
    foreach ($argv as $arg) {
        if (preg_match('/^--([a-zA-Z0-9-]+)(?:=.*)?$/', $arg, $matches)) {
            $provided_long_opts[] = $matches[1];
        }
    }

    // Check for unrecognized long options
    foreach ($provided_long_opts as $opt) {
        $valid_opts = array_map(function ($long_opt) {
            return rtrim($long_opt, ':');
        }, $long_opts);
        if (!in_array($opt, $valid_opts)) {
            log_message("Error: Unrecognized option '--$opt'", VERBOSITY_QUIET, true);
            exit(1);
        }
    }

    // Handle --verbose and --quiet
    if (isset($options['verbose']) && isset($options['quiet'])) {
        log_message("Error: Cannot use both --verbose and --quiet options.", VERBOSITY_QUIET, true);
        exit(1);
    } elseif (isset($options['verbose'])) {
        $defaults['verbosity'] = VERBOSITY_VERBOSE;
    } elseif (isset($options['quiet'])) {
        $defaults['verbosity'] = VERBOSITY_QUIET;
    }

    // Handle --wtf
    if (isset($options['wtf'])) {
        log_message("Â¯\\_(ãƒ„)_/Â¯", VERBOSITY_QUIET);
        exit(0);
    }

    // Handle --fml
    if (isset($options['fml'])) {
        log_message("ðŸ”¥ This is fine ðŸ”¥", VERBOSITY_QUIET);
        exit(0);
    }

    // Handle --version
    if (isset($options['version'])) {
        log_message(PROGRAM_NAME . " configure " . VERSION, VERBOSITY_QUIET);
        exit(0);
    }

    // Handle --help
    if (isset($options['help'])) {
        echo "Usage: configure [options] [VAR=VALUE...]\n";
        echo "Options:\n";
        echo "  --prefix=PREFIX        installation prefix directory [{$config['prefix']}]\n";
        echo "  --datarootdir=DIR      read-only data root directory [{$config['datarootdir']}]\n";
        echo "  --datadir=DIR          read-only data directory [{$config['datadir']}]\n";
        echo "  --localstatedir=DIR    modifiable data directory [{$config['localstatedir']}]\n";
        echo "  --sysconfdir=DIR       system configuration directory [{$config['sysconfdir']}]\n";
        echo "  --srcdir=DIR           source directory containing config/config.php.in [{$config['srcdir']}]\n";
        echo "  --builddir=DIR         build directory for output config/config.php [{$config['builddir']}]\n";
        echo "  --mode=MODE            development or production mode [{$config['mode']}]\n";
        echo "  --version              output version information and exit\n";
        echo "  --help                 display this help and exit\n";
        echo "  --wtf                  output shrug emoji and exit\n";
        echo "  --fml                  output flame emojis with 'This is fine' and exit\n";

        echo "\nEnvironment variables:\n";
        echo "  VAR=VALUE              set configuration variables (e.g., PHP_VERSION=8.2, DOMAIN=example.com)\n";

        echo "\nThe 'configure' script generates a 'config.status' shell script that can be run\n";
        echo "to recreate the current configuration.\n";
        echo "\nReport bugs to <your-contact-info>.\n";
        exit(0);
    }

    // Update config with options
    foreach (['prefix', 'datarootdir', 'datadir', 'localstatedir', 'sysconfdir', 'srcdir', 'builddir', 'mode', 'domain'] as $key) {
        $config[$key] = $options[$key] ?? $config[$key];
    }

    // Validate mode
    if (!in_array($config['mode'], ['DEVELOPMENT', 'PRODUCTION'])) {
        fwrite(STDERR, "Error: --mode must be DEVELOPMENT or PRODUCTION\n");
        exit(1);
    }

    // Parse VAR=VALUE arguments
    foreach ($argv as $arg) {
        if (preg_match('/^([A-Za-z_]+)=(.+)$/', $arg, $matches)) {
            $config[strtolower($matches[1])] = $matches[2];
        }
    }

    // Parse environment variables
    foreach ($_ENV as $key => $value) {
        if (preg_match('/^[A-Za-z_]+$/', $key)) {
            $config[strtolower($key)] = $value;
        }
    }

    if ($defaults['verbosity'] >= VERBOSITY_VERBOSE) {
        log_message("Parsed configuration values:", VERBOSITY_VERBOSE);
        foreach ($config as $key => $value) {
            log_message("  $key = $value", VERBOSITY_VERBOSE);
        }
    }

    return $argv; // Return original arguments for config.status
}

function validate_directories() {
    global $config;

    log_message("Validating directories...", VERBOSITY_VERBOSE);

    // Normalize paths to absolute
    $config['srcdir'] = realpath($config['srcdir']) ?: $config['srcdir'];
    $config['builddir'] = realpath($config['builddir']) ?: $config['builddir'];

    log_message("Source directory: {$config['srcdir']}", VERBOSITY_VERBOSE);
    log_message("Build directory: {$config['builddir']}", VERBOSITY_VERBOSE);

    // Validate srcdir
    if (!is_dir($config['srcdir'])) {
        log_message("Error: Source directory '{$config['srcdir']}' does not exist.", VERBOSITY_QUIET, true);
        exit(1);
    }
    if (!is_readable($config['srcdir'])) {
        log_message("Error: Source directory '{$config['srcdir']}' is not readable.", VERBOSITY_QUIET, true);
        exit(1);
    }

    // Check if srcdir and builddir are the same
    if ($config['srcdir'] === $config['builddir']) {
        log_message("Error: Source directory and build directory cannot be the same.", VERBOSITY_QUIET, true);
        exit(1);
    }
}

function check_php_options() {
    if (!extension_loaded('pdo_sqlite')) {
        log_message("Error: PHP extension 'pdo_sqlite' is required.", VERBOSITY_QUIET, true);
        exit(1);
    }
    log_message("PHP extension 'pdo_sqlite' is available.", VERBOSITY_VERBOSE);
}

function check_sqlite() {
    global $config;

    log_message("Checking for sqlite3...", VERBOSITY_VERBOSE);

    $command = "sqlite3 -version 2>&1";
    exec($command, $output, $return_var);
    if ($return_var !== 0 || empty($output)) {
        log_message("Error: sqlite3 not found or not working.", VERBOSITY_QUIET, true);
        exit(1);
    }
    $version_string = implode("\n", $output);
    if (preg_match('/^(\d+\.\d+\.\d+)/', $version_string, $matches)) {
        $config['sqlite_version'] = $matches[1];
        log_message("Found sqlite3 version {$config['sqlite_version']}", VERBOSITY_VERBOSE);
    } else {
        log_message("Error: Could not determine sqlite3 version.", VERBOSITY_QUIET, true);
        exit(1);
    }
}

function check_nginx() {
    global $config;

    log_message("Checking for nginx...", VERBOSITY_VERBOSE);

    $command = "nginx -v 2>&1";
    exec($command, $output, $return_var);
    if ($return_var !== 0 || empty($output)) {
        log_message("Error: nginx not found or not working.", VERBOSITY_QUIET, true);
        exit(1);
    }
    $version_string = implode("\n", $output);
    if (preg_match('/nginx\/(\d+\.\d+\.\d+)/', $version_string, $matches)) {
        $config['nginx_version'] = $matches[1];
        log_message("Found nginx version {$config['nginx_version']}", VERBOSITY_VERBOSE);
    } else {
        log_message("Error: Could not determine nginx version.", VERBOSITY_QUIET, true);
        exit(1);
    }
}

function find_highest_php_fpm_version() {
    global $config;

    log_message("Searching for php-fpm...", VERBOSITY_VERBOSE);

    // Use specified PHP_VERSION if provided
    if (isset($config['php_version'])) {
        $php_fpm_bin = "php-fpm" . preg_replace('/^(\d+\.\d+).*/', '$1', $config['php_version']);
        log_message("Checking specified php-fpm version: $php_fpm_bin", VERBOSITY_VERBOSE);
        $command = escapeshellcmd($php_fpm_bin) . " -v 2>&1";
        exec($command, $output, $return_var);
        if ($return_var !== 0 || empty($output)) {
            log_message("Error: $php_fpm_bin not found or not working.", VERBOSITY_QUIET, true);
            exit(1);
        }
        $version_string = implode("\n", $output);
        if (preg_match('/PHP\s+(\d+\.\d+\.\d+)/', $version_string, $matches)) {
            $config['php_fpm_version'] = $matches[1];
            $config['php_fpm'] = $php_fpm_bin;
            log_message("Found $php_fpm_bin version {$config['php_fpm_version']}", VERBOSITY_VERBOSE);
            if ($matches[1] !== $config['php_version']) {
                log_message("Warning: Specified PHP_VERSION {$config['php_version']} does not match $php_fpm_bin version {$matches[1]}.", VERBOSITY_NORMAL, true);
            }
            return true;
        } else {
            log_message("Error: Could not determine $php_fpm_bin version.", VERBOSITY_QUIET, true);
            exit(1);
        }
    }

    // Find highest php-fpm version
    log_message("No PHP_VERSION specified, searching for highest php-fpm version...", VERBOSITY_VERBOSE);
    $php_fpm_bin = 'php-fpm';
    $possible_bins = [$php_fpm_bin];

    for ($major = 5; $major <= 9; $major++) {
        for ($minor = 0; $minor <= 9; $minor++) {
            $possible_bins[] = "php-fpm{$major}.{$minor}";
        }
    }

    $highest_version = null;
    $selected_bin = null;

    foreach ($possible_bins as $bin_name) {
        $command = "command -v " . escapeshellarg($bin_name);
        exec($command, $output, $return_var);
        if ($return_var === 0 && !empty($output)) {
            $bin_path = $output[0];
            log_message("Found php-fpm binary: $bin_path", VERBOSITY_VERBOSE);
            $version_command = escapeshellcmd($bin_path) . " -v 2>&1";
            exec($version_command, $version_output, $version_return_var);
            if ($version_return_var === 0) {
                $version_string = implode("\n", $version_output);
                if (preg_match('/PHP\s+(\d+\.\d+\.\d+)/', $version_string, $matches)) {
                    $version = $matches[1];
                    log_message("Detected version $version for $bin_name", VERBOSITY_VERBOSE);
                    if ($highest_version === null || version_compare($version, $highest_version, '>')) {
                        $highest_version = $version;
                        $selected_bin = $bin_name;
                    }
                }
            }
        }
        $output = []; // Reset output
    }

    if (!$selected_bin || !$highest_version) {
        log_message("Error: No php-fpm binary found in PATH.", VERBOSITY_QUIET, true);
        exit(1);
    }

    $config['php_fpm'] = $selected_bin;
    $config['php_fpm_version'] = $highest_version;
    log_message("Selected $selected_bin (version $highest_version)", VERBOSITY_VERBOSE);

    // Search for the associated socket file in /run/php/.
    // The problem is that the socket file may vary based on the PHP version,
    // and also, the socket file uses only the major and minor version numbers.
    $socket_file = "/run/php/php" . preg_replace('/^(\d+\.\d+).*/', '$1', $highest_version) . "-fpm.sock";
    if (file_exists($socket_file)) {
        $config['php_fpm_sock'] = $socket_file;
        log_message("Found PHP-FPM socket file: {$config['php_fpm_sock']}", VERBOSITY_VERBOSE);
    } else {
        log_message("Warning: PHP-FPM socket file {$socket_file} does not exist. Using {$config['php_fpm_sock']}", VERBOSITY_NORMAL, true);
    }

    return true;
}

function substitute_template($input_file, $output_file, $config) {
    log_message("Processing template: $input_file -> $output_file", VERBOSITY_VERBOSE);

    // Read input file
    if (!file_exists($input_file)) {
        log_message("Error: {$input_file} not found.", VERBOSITY_QUIET, true);
        exit(1);
    }
    $content = @file_get_contents($input_file);
    if ($content === false) {
        log_message("Error: Failed to read {$input_file}.", VERBOSITY_QUIET, true);
        exit(1);
    }

    // Replace @variable@ placeholders
    $content = preg_replace_callback('/@(\w+)@/', function ($matches) use ($config) {
        $key = strtolower($matches[1]);
        $value = $config[$key] ?? $matches[0];
        while (preg_match('/@(\w+)@/', $value, $nested)) {
            $nested_key = strtolower($nested[1]);
            $nested_value = $config[$nested_key] ?? $nested[0];
            log_message("For '{$key}', expanding '@{$nested[1]}@' to '{$nested_value}' in '{$value}'", VERBOSITY_VERBOSE);
            $value = str_replace($nested[0], $nested_value, $value);
        }
        log_message("Replacing {$key} with string value '{$value}'", VERBOSITY_VERBOSE);
        return $value;
    }, $content);

    $content = preg_replace_callback(
        "/define\\('([A-Z_]+)',\\s*([^)]+)\\);/",
        function ($matches) use ($config) {
            $constantName = $matches[1];
            $key = $constantName;
            $lowercaseKey = strtolower($constantName);
            $newValue = $config[$key] ?? $config[$lowercaseKey] ?? null;

            if (isset($newValue)) {
                while (preg_match('/@(\w+)@/', $newValue, $nested)) {
                    $nested_key = strtolower($nested[1]);
                    $nested_value = $config[$nested_key] ?? $nested[0];
                    log_message("For '{$constantName}' expanding '@{$nested[1]}@' to '{$nested_value}' in '{$newValue}'", VERBOSITY_VERBOSE);
                    $newValue = str_replace($nested[0], $nested_value, $newValue);
                }
                if (is_int($newValue) || (is_string($newValue) && ctype_digit($newValue))) {
                    log_message("Replacing constant {$constantName} with integer value {$newValue}", VERBOSITY_VERBOSE);
                    return "define('{$constantName}', {$newValue});";
                } elseif (is_string($newValue)) {
                    log_message("Replacing constant {$constantName} with string value '{$newValue}'", VERBOSITY_VERBOSE);
                    return "define('{$constantName}', '" . addslashes($newValue) . "');";
                } else {
                    return $matches[0];
                }
            } else {
                return $matches[0];
            }
        },
        $content
    );

    // Add header
    $header = "<?php\n";
    $header .= "# Generated by " . PROGRAM_NAME . " (version " . VERSION . ") from " . basename($input_file) . "\n";
    $header .= "# DO NOT EDIT (changes will be lost when configure is rerun)\n";
    $header .= "?>\n";
    $content = $header . $content;

    // Write to output file
    if (@file_put_contents($output_file, $content) === false) {
        log_message("Error: Failed to write {$output_file}.", VERBOSITY_QUIET, true);
        exit(1);
    }

    log_message("Successfully generated $output_file", VERBOSITY_VERBOSE);
}

function generate_config_status($argv) {
    log_message("Generating config.status...", VERBOSITY_VERBOSE);

    $content = "#!/bin/sh\n";
    $content .= "# Generated by " . PROGRAM_NAME . " (version " . VERSION . ")\n";
    $content .= "# Run this to recreate the current configuration\n\n";

    $script_name = './' . basename($argv[0]);
    array_shift($argv);
    $quoted_args = array_map(function ($arg) {
        if (preg_match('/[\s|&;<>()$`\\"\']/', $arg)) {
            return '"' . str_replace('"', '\"', $arg) . '"';
        }
        return $arg;
    }, $argv);
    $command = $script_name . ' ' . implode(' ', $quoted_args);
    $content .= "exec $command\n";

    if (@file_put_contents('config.status', $content) === false) {
        log_message("Error: Failed to write config.status.", VERBOSITY_QUIET, true);
        exit(1);
    }
    chmod('config.status', 0755) or log_message("Warning: Could not make config.status executable.", VERBOSITY_NORMAL, true);

    log_message("Successfully generated config.status", VERBOSITY_VERBOSE);
}

function main() {
    global $config, $argv;

    if (is_file('config.log')) {
        unlink('config.log'); // Clear previous log file
    }
    log_message("Running " . PROGRAM_NAME . " (version " . VERSION . ")", VERBOSITY_VERBOSE);

    // Step 1: Process command-line arguments and environment variables
    $original_argv = parse_arguments();

    // Step 2: Validate srcdir and builddir
    validate_directories();

    // Step 3: Check required tools
    check_php_options();
    check_sqlite();
    check_nginx();
    find_highest_php_fpm_version();

    // Set PHP_VERSION to PHP_FPM_VERSION if not provided
    if (!isset($config['php_version'])) {
        $config['php_version'] = preg_replace('/^(\d+\.\d+).*/', '$1', $config['php_fpm_version']);
        log_message("Set PHP_VERSION to {$config['php_version']}", VERBOSITY_VERBOSE);
    }

    // Step 4: Generate config.php from config.php.in
    $input_file = rtrim($config['srcdir'], '/') . '/config/config.php.in';
    $output_file = rtrim($config['builddir'], '/') . '/config/config.php';
    if (!is_dir(dirname($output_file))) {
        log_message("Creating directory for $output_file", VERBOSITY_VERBOSE);
        mkdir(dirname($output_file), 0755, true) or log_message("Error: Cannot create directory for $output_file", VERBOSITY_QUIET, true);
    }
    substitute_template($input_file, $output_file, $config);

    // Step 5: Generate config.status
    generate_config_status($original_argv);

    // Final output
    log_message("Configuration complete. Run './builder --build' to build.", VERBOSITY_NORMAL);
    log_message("Using php-fpm: {$config['php_fpm']} (version {$config['php_fpm_version']})", VERBOSITY_NORMAL);
    log_message("Using nginx: version {$config['nginx_version']}", VERBOSITY_NORMAL);
    log_message("Using sqlite3: version {$config['sqlite_version']}", VERBOSITY_NORMAL);
    log_message("Using php-fpm socket: {$config['php_fpm_sock']}", VERBOSITY_NORMAL);
    log_message("Using mode: {$config['mode']}", VERBOSITY_NORMAL);
}

main();

?>
